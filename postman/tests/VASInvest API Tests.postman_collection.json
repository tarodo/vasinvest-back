{
	"info": {
		"_postman_id": "bbc3e832-676f-4b4f-9d67-79856c69e53b",
		"name": "VASInvest API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Init",
					"item": [
						{
							"name": "Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"access_token\", \"token_type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a BEARER type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"admin_token\", pm.response.json()[\"access_token\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{admin_email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{admin_password}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "me",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"access_token\", \"token_type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a BEARER type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"user_token\", pm.response.json()[\"access_token\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user_email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{user_password}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "me",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"temp_user_id\", pm.response.json()[\"id\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "X Admin Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"UserErrors.UserExists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "X User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"LoginErrors.NotSU\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "Me Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"admin_id\", pm.response.json()[\"id\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "All Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Me User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"user_id\", pm.response.json()[\"id\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "X All User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"LoginErrors.NotSU\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"full_name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{temp_user_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{temp_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Itself",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"full_name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "X User Not Itself",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"LoginErrors.NotSU\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"full_name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{temp_user_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{temp_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Make SU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.is_superuser).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"full_name\": \"{{$randomFullName}}\",\r\n    \"is_superuser\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{temp_user_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{temp_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X User Itself Make SU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"UserErrors.UserNotSU\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"full_name\": \"{{$randomFullName}}\",\r\n    \"is_superuser\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Platforms",
			"item": [
				{
					"name": "Init",
					"item": [
						{
							"name": "Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"access_token\", \"token_type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a BEARER type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"admin_token\", pm.response.json()[\"access_token\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{admin_email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{admin_password}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "me",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"access_token\", \"token_type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a BEARER type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"user_token\", pm.response.json()[\"access_token\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user_email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{user_password}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "me",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid response type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user_id).to.eql(pm.collectionVariables.get(\"admin_id\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"temp_platform_id_admin\", pm.response.json()[\"id\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomBitcoin}}\",\r\n    \"is_active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid response type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user_id).to.eql(pm.collectionVariables.get(\"user_id\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"temp_platform_id\", pm.response.json()[\"id\"]);\r",
											"pm.collectionVariables.set(\"temp_platform_name\", pm.response.json()[\"name\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomBitcoin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "X User Same Platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"PlatformErrors.PlatformExists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{temp_platform_name}}\",\r\n    \"description\": \"{{$randomBitcoin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Other User Same Platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Token has a valid name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"temp_platform_name\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{temp_platform_name}}\",\r\n    \"description\": \"{{$randomBitcoin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "User -> User's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"temp_platform_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomBitcoin}}\",\r\n    \"is_active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/{{temp_platform_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"{{temp_platform_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X User -> Other's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"PlatformErrors.NoRightsToUpdate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomBitcoin}}\",\r\n    \"is_active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/{{temp_platform_id_admin}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"{{temp_platform_id_admin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin -> User's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"temp_platform_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomBitcoin}}\",\r\n    \"is_active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/{{temp_platform_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"{{temp_platform_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X User Wrong ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"PlatformErrors.NoRightsToUpdate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomBitcoin}}\",\r\n    \"is_active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/666",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"666"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "User -> User's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"temp_platform_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/platforms/{{temp_platform_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"{{temp_platform_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X User -> Other's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"PlatformErrors.NoRightsToRead\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/platforms/{{temp_platform_id_admin}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"{{temp_platform_id_admin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin -> User's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"temp_platform_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/platforms/{{temp_platform_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"{{temp_platform_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin All",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Only limit platforms\", function () {\r",
											"    let my_id = pm.collectionVariables.get(\"user_id\")\r",
											"    var jsonData = pm.response.json();\r",
											"    let count = 0;\r",
											"    for (let i in jsonData) {\r",
											"        count++\r",
											"    }\r",
											"    pm.expect(count).to.lte(2)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/platforms/?skip=3&limit=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										""
									],
									"query": [
										{
											"key": "skip",
											"value": "3"
										},
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User All",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Only my platforms\", function () {\r",
											"    let my_id = pm.collectionVariables.get(\"user_id\")\r",
											"    var jsonData = pm.response.json();\r",
											"    for (let i in jsonData) {\r",
											"        pm.expect(jsonData[i].user_id).to.eql(my_id)\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/platforms/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "User -> User's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/platforms/{{temp_platform_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"{{temp_platform_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X User -> User's Wrong ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"PlatformErrors.PlatformNotExists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/platforms/{{temp_platform_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"{{temp_platform_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid response type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user_id).to.eql(pm.collectionVariables.get(\"user_id\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"temp_platform_id\", pm.response.json()[\"id\"]);\r",
											"pm.collectionVariables.set(\"temp_platform_name\", pm.response.json()[\"name\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomBitcoin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin -> User's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/platforms/{{temp_platform_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"{{temp_platform_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X User -> Other's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"PlatformErrors.NoRightsToDelete\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/platforms/{{temp_platform_id_admin}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										"{{temp_platform_id_admin}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tickers",
			"item": [
				{
					"name": "Init",
					"item": [
						{
							"name": "Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"access_token\", \"token_type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a BEARER type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"admin_token\", pm.response.json()[\"access_token\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{admin_email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{admin_password}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "me",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"access_token\", \"token_type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a BEARER type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"user_token\", pm.response.json()[\"access_token\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user_email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{user_password}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "me",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid response type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user_id).to.eql(pm.collectionVariables.get(\"user_id\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"temp_platform_id\", pm.response.json()[\"id\"]);\r",
											"pm.collectionVariables.set(\"temp_platform_name\", pm.response.json()[\"name\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomBitcoin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin create Platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid response type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user_id).to.eql(pm.collectionVariables.get(\"admin_id\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"temp_platform_id_admin\", pm.response.json()[\"id\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomBitcoin}}\",\r\n    \"is_active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "User -> User's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"temp_ticker_id\", pm.response.json()[\"id\"]);\r",
											"pm.collectionVariables.set(\"temp_ticker_code\", pm.response.json()[\"code\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": {{temp_platform_id}},\r\n  \"code\": \"{{$randomNoun}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first coin\",\r\n  \"type\": \"crypto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin -> User's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"temp_ticker_id\", pm.response.json()[\"id\"]);\r",
											"pm.collectionVariables.set(\"temp_ticker_code\", pm.response.json()[\"code\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": {{temp_platform_id}},\r\n  \"code\": \"{{$randomNoun}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first coin\",\r\n  \"type\": \"crypto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin -> Admin's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"temp_ticker_id_admin\", pm.response.json()[\"id\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": {{temp_platform_id_admin}},\r\n  \"code\": \"{{$randomNoun}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first coin\",\r\n  \"type\": \"crypto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "X User -> User's Same Ticker",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"TickerErrors.TickerExists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": {{temp_platform_id}},\r\n  \"code\": \"{{temp_ticker_code}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first coin\",\r\n  \"type\": \"crypto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "X User Wrong platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"TickerErrors.NoRightsToCreate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": 666,\r\n  \"code\": \"{{temp_ticker_code}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first coin\",\r\n  \"type\": \"crypto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "X User -> Other's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"TickerErrors.NoRightsToCreate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": {{temp_platform_id_admin}},\r\n  \"code\": \"{{temp_ticker_code}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first coin\",\r\n  \"type\": \"crypto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "User -> User's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": {{temp_platform_id}},\r\n  \"code\": \"{{$randomNoun}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first update\",\r\n  \"type\": \"share\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/{{temp_ticker_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										"{{temp_ticker_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User creates another Platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid response type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user_id).to.eql(pm.collectionVariables.get(\"user_id\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"temp_platform_id\", pm.response.json()[\"id\"]);\r",
											"pm.collectionVariables.set(\"temp_platform_name\", pm.response.json()[\"name\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomBitcoin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/platforms/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"platforms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "User changes a platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": {{temp_platform_id}},\r\n  \"code\": \"{{$randomNoun}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first update\",\r\n  \"type\": \"share\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/{{temp_ticker_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										"{{temp_ticker_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X User -> Other's ticker",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"TickerErrors.NoRightsToUpdate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": {{temp_platform_id}},\r\n  \"code\": \"{{$randomNoun}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first update\",\r\n  \"type\": \"share\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/{{temp_ticker_id_admin}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										"{{temp_ticker_id_admin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X User -> Wrong platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"TickerErrors.NoRightsToCreate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": 666,\r\n  \"code\": \"{{$randomNoun}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first update\",\r\n  \"type\": \"share\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/{{temp_ticker_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										"{{temp_ticker_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X User -> Other's platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.have.all.keys(\"error\", \"error_msg\")\r",
											"});\r",
											"\r",
											"pm.test(\"Token has a valid ERROR type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail.error).to.eql(\"TickerErrors.NoRightsToCreate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"platform_id\": {{temp_platform_id_admin}},\r\n  \"code\": \"{{$randomNoun}}\",\r\n  \"name\": \"{{$randomBitcoin}}\",\r\n  \"description\": \"my first update\",\r\n  \"type\": \"share\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tickers/{{temp_ticker_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tickers",
										"{{temp_ticker_id}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "<Basic Auth Username>",
				"type": "string"
			},
			{
				"key": "password",
				"value": "<Basic Auth Password>",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:8000"
		},
		{
			"key": "admin_email",
			"value": "admin@admin.com"
		},
		{
			"key": "admin_password",
			"value": "12345678"
		},
		{
			"key": "admin_id",
			"value": ""
		},
		{
			"key": "admin_token",
			"value": ""
		},
		{
			"key": "user_email",
			"value": "test@example.com"
		},
		{
			"key": "user_password",
			"value": "secret_password"
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "user_token",
			"value": ""
		},
		{
			"key": "temp_user_id",
			"value": ""
		},
		{
			"key": "temp_platform_id_admin",
			"value": ""
		},
		{
			"key": "temp_platform_id",
			"value": ""
		},
		{
			"key": "temp_platform_name",
			"value": ""
		},
		{
			"key": "temp_ticker_id",
			"value": ""
		},
		{
			"key": "temp_ticker_code",
			"value": ""
		},
		{
			"key": "temp_ticker_id_admin",
			"value": ""
		}
	]
}